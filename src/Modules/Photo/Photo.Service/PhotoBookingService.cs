//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QN.Ots.Photo.Photo.Service
{
    using QN.EDF.Common;
    using QN.EDF.Model;
    using Microsoft.Extensions.Hosting;
    using QN.EDF.Common.Util;
    using Microsoft.Extensions.Configuration;
    using Microsoft.AspNetCore.Http;
    using QN.Ots.Photo.Framework;
    using QN.Ots.Photo.Photo.BusinessComponent;
    using QN.Ots.Photo.Photo.BusinessEntity;
    using QN.Ots.Photo.Photo.ServiceInterface;


    public class PhotoBookingService : IPhotoBookingSI
    {

        private PhotoBookingBusinessComponent bc = QNInjection.Build<PhotoBookingBusinessComponent>();
        private PhotoCategoryBusinessComponent categoryBc = QNInjection.Build<PhotoCategoryBusinessComponent>();
        private IHttpContextAccessor http = QNInjection.Build<IHttpContextAccessor>();

        public BizData<(List<PhotoBookingBiz>, int)> GetPhotoBookingPaging(PageRequest<PhotoBookingBiz> data)
        {
            var boData = data.Transfer<PageRequest<PhotoBookingBO>>();
            var result = bc.GetPhotoBookingPaging(boData);

            var bizResponse = new BizData<(List<PhotoBookingBiz>, int)>()
            {
                Code = 200,
                Success = true,
                Msg = "succeed",
                Data = (result.Item1.Transfer<List<PhotoBookingBiz>>(), result.Item2)
            };

            //get all category
            var category = categoryBc.GetPhotoCategoryPaging(new PageRequest<PhotoCategoryBO>() { Current = 1, PageNum = 1, PageSize = 10000 });

            bizResponse.Data.Item1.ForEach(k =>
            {
                k.CategoryName = category.Item1.Where(m => m.id == k.CategoryId)?.FirstOrDefault()?.name ?? "";
                k.Price = category.Item1.Where(m => m.id == k.CategoryId)?.FirstOrDefault()?.price ?? "";
            });

            return bizResponse;
        }

        public BizData<List<PhotoBookingBiz>> GetPhotoBooking(QueryRequest<PhotoBookingBiz> data)
        {
            var boData = data.Transfer<QueryRequest<PhotoBookingBO>>();
            var result = bc.GetPhotoBooking(boData);

            var bizResponse = new BizData<List<PhotoBookingBiz>>()
            {
                Code = 200,
                Success = true,
                Msg = "succeed",
                Data = result.Transfer<List<PhotoBookingBiz>>()
            };

            return bizResponse;
        }

        public BizData<PhotoBookingBiz> GetPhotoBookingDetail(PhotoBookingBiz data)
        {
            var list = GetPhotoBooking(new QueryRequest<PhotoBookingBiz>() { Data = data });

            var bizResponse = new BizData<PhotoBookingBiz>()
            {
                Code = 200,
                Success = true,
                Msg = "succeed",
                Data = list.Data.FirstOrDefault()
            };

            return bizResponse;
        }

        public BizData<int> AddPhotoBooking(List<PhotoBookingBiz> data)
        {
            //2024-04-28 check duplicate records
            var all = bc.GetPhotoBookingPaging(new PageRequest<PhotoBookingBO>() { Current = 1, PageSize = 10000 });

            var appointDate = data.FirstOrDefault().AppointDate;
            var appointTime = data.FirstOrDefault().AppointTime;
            var categoryId = data.FirstOrDefault().CategoryId;

            bool alreadyAdded = all.Item1.Any(x =>
            x.appoint_date == appointDate &&
            x.appoint_time == appointTime
            /*x.category_id == categoryId*/);

            if (alreadyAdded)
            {
                return new BizData<int>() { Code = 500, Success = false, Msg = "当前日期，时段预约已满，请重新选择！", Data = 0 };
            }

            data.ForEach(p => p.FillCommonFields());
            var boData = data.Transfer<List<TPhotoBooking>>();
            var result = bc.AddPhotoBooking(boData);
            return new BizData<int>() { Code = 200, Success = true, Msg = "预约成功！", Data = result };
        }

        public BizData<int> UpdatePhotoBooking(List<PhotoBookingBiz> data)
        {
            data.ForEach(p => p.FillCommonFields());
            var boData = data.Transfer<List<TPhotoBooking>>();
            var result = bc.UpdatePhotoBooking(boData);
            return new BizData<int>() { Code = 200, Success = true, Msg = "succeed", Data = result };
        }

        public BizData<int> DeletePhotoBooking(QNIDParamBiz data)
        {
            var boData = data.Transfer<QNIDParam>();
            var result = bc.DeletePhotoBooking(boData);
            return new BizData<int>() { Code = 200, Success = true, Msg = "succeed", Data = result };
        }

        public BizData<int> DataStatusPhotoBooking(QNIDParamBiz data)
        {
            var boData = data.Ids.Select(x => new PhotoBookingBiz() { Id = x.Id, DataStatus = x.IsPhysical }).ToList();
            var result = UpdatePhotoBooking(boData);
            return new BizData<int>() { Code = 200, Success = true, Msg = "succeed", Data = result.Data };
        }

        public BizData<QNExcelExportData> ExportPhotoBooking(PageRequest<PhotoBookingBiz> data)
        {
            //1.获取数据
            List<PhotoBookingBiz> exportData = GetPhotoBookingPaging(data).Data.Item1;

            //2.拼装参数
            var env = QNInjection.Build<IHostingEnvironment>();

            var fileName = $"PhotoBookingBiz_{DateTime.Now.ToString("yyyymmddHHmmss") + DateTime.Now.Millisecond + QNUtils.RandNum(4)}.xlsx";

            var filePath = env.ContentRootPath + "\\wwwroot\\excel\\download\\";
            var fullPath = $"{filePath}{fileName}";

            QNExcelExportModel<PhotoBookingBiz> exportParam = new QNExcelExportModel<PhotoBookingBiz>()
            {
                Header = new Dictionary<string, string>()
                {
                    [""] = "序号",
                },
                Data = exportData,
                ExportType = "",
                FileName = fileName,
                FilePath = fullPath
            };

            //3.调用公用方法生成导出数据

            var result = QNExcelHelper.ExportExcel(exportParam);

            return new BizData<QNExcelExportData>() { Data = result };
        }
    }
}

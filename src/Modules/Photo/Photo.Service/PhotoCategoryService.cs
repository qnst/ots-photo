//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QN.Ots.Photo.Photo.Service
{
    using QN.EDF.Common;
    using QN.EDF.Model;
    using Microsoft.Extensions.Hosting;
    using QN.EDF.Common.Util;
    using Microsoft.Extensions.Configuration;
    using Microsoft.AspNetCore.Http;
    using QN.Ots.Photo.Framework;
    using QN.Ots.Photo.Photo.BusinessComponent;
    using QN.Ots.Photo.Photo.BusinessEntity;
    using QN.Ots.Photo.Photo.ServiceInterface;


    public class PhotoCategoryService : IPhotoCategorySI
    {

        private PhotoCategoryBusinessComponent bc = QNInjection.Build<PhotoCategoryBusinessComponent>();
        private IPhotoImgSI photoSi = QNInjection.Build<IPhotoImgSI>();
        private IHttpContextAccessor http = QNInjection.Build<IHttpContextAccessor>();

        public BizData<(List<PhotoCategoryBiz>, int)> GetPhotoCategoryPaging(PageRequest<PhotoCategoryBiz> data)
        {
            var boData = data.Transfer<PageRequest<PhotoCategoryBO>>();
            var result = bc.GetPhotoCategoryPaging(boData);

            var bizResponse = new BizData<(List<PhotoCategoryBiz>, int)>()
            {
                Code = 200,
                Success = true,
                Msg = "succeed",
                Data = (result.Item1.Transfer<List<PhotoCategoryBiz>>(), result.Item2)
            };

            var viewUrl = $"{QNInjection.Build<IConfiguration>()?.GetValue<string>("QN:Upload:Url") ?? ""}";

            bizResponse.Data.Item1.ForEach(x =>
            {
                x.Images = x?.ImgStr?.Split(',')?.Select(t2 => new PhotoImgBiz()
                {
                    Path = viewUrl + t2,
                    Id = t2
                }).ToList();
            });

            return bizResponse;
        }

        public BizData<List<PhotoCategoryBiz>> GetPhotoCategory(QueryRequest<PhotoCategoryBiz> data)
        {
            var boData = data.Transfer<QueryRequest<PhotoCategoryBO>>();
            var result = bc.GetPhotoCategory(boData);

            var bizResponse = new BizData<List<PhotoCategoryBiz>>()
            {
                Code = 200,
                Success = true,
                Msg = "succeed",
                Data = result.Transfer<List<PhotoCategoryBiz>>()
            };

            return bizResponse;
        }

        public BizData<PhotoCategoryBiz> GetPhotoCategoryDetail(PhotoCategoryBiz data)
        {
            var list = GetPhotoCategory(new QueryRequest<PhotoCategoryBiz>() { Data = data });

            var bizResponse = new BizData<PhotoCategoryBiz>()
            {
                Code = 200,
                Success = true,
                Msg = "succeed",
                Data = list.Data.FirstOrDefault()
            };

            return bizResponse;
        }

        public BizData<int> AddPhotoCategory(List<PhotoCategoryBiz> data)
        {
            data.ForEach(p => p.FillCommonFields());

            var boData = data.Transfer<List<TPhotoCategory>>();
            var result = bc.AddPhotoCategory(boData);
            return new BizData<int>() { Code = 200, Success = true, Msg = "succeed", Data = result };
        }

        public BizData<int> UpdatePhotoCategory(List<PhotoCategoryBiz> data)
        {
            data.ForEach(p =>
            {
                p.FillCommonFields();
                p?.Images?.ForEach(x =>
                {
                    x.Relid = p.Id;
                    x.FillCommonFields();
                });
            });

            var imgs = photoSi.GetPhotoImg(new QueryRequest<PhotoImgBiz>()
            {
                Data = new PhotoImgBiz() { Relid = data.FirstOrDefault().Id }
            });

            var imgRemoveIds = new List<string>();

            imgs.Data.ForEach(t =>
            {
                if (data.FirstOrDefault()?.Images?.Any() ?? false)
                {
                    bool isExist = data.FirstOrDefault().Images.Where(m => m.Path == t.Path).Any();
                    if (!isExist) { imgRemoveIds.Add(t.Id); }
                }
            });

            var newImgs = new List<PhotoImgBiz>();

            data?.FirstOrDefault()?.Images?.ForEach(p =>
            {
                bool isExist = imgs.Data.Any(x => x.Path == p.Path);

                if (!isExist)
                {
                    newImgs.Add(p);
                }
            });

            photoSi.AddPhotoImg(newImgs);
            photoSi.DeletePhotoImg(new QNIDParamBiz()
            {
                Ids = imgRemoveIds.Select(x1 => new IDParamBiz() { Id = x1, IsPhysical = 1 }).ToList()
            });

            var boData = data.Transfer<List<TPhotoCategory>>();
            var result = bc.UpdatePhotoCategory(boData);
            return new BizData<int>() { Code = 200, Success = true, Msg = "succeed", Data = result };
        }

        public BizData<int> DeletePhotoCategory(QNIDParamBiz data)
        {
            var boData = data.Transfer<QNIDParam>();
            var result = bc.DeletePhotoCategory(boData);
            return new BizData<int>() { Code = 200, Success = true, Msg = "succeed", Data = result };
        }

        public BizData<int> DataStatusPhotoCategory(QNIDParamBiz data)
        {
            var boData = data.Ids.Select(x => new PhotoCategoryBiz() { Id = x.Id, DataStatus = x.IsPhysical }).ToList();
            var result = UpdatePhotoCategory(boData);
            return new BizData<int>() { Code = 200, Success = true, Msg = "succeed", Data = result.Data };
        }

        public BizData<QNExcelExportData> ExportPhotoCategory(PageRequest<PhotoCategoryBiz> data)
        {
            //1.获取数据
            List<PhotoCategoryBiz> exportData = GetPhotoCategoryPaging(data).Data.Item1;

            //2.拼装参数
            var env = QNInjection.Build<IHostingEnvironment>();

            var fileName = $"PhotoCategoryBiz_{DateTime.Now.ToString("yyyymmddHHmmss") + DateTime.Now.Millisecond + QNUtils.RandNum(4)}.xlsx";

            var filePath = env.ContentRootPath + "\\wwwroot\\excel\\download\\";
            var fullPath = $"{filePath}{fileName}";

            QNExcelExportModel<PhotoCategoryBiz> exportParam = new QNExcelExportModel<PhotoCategoryBiz>()
            {
                Header = new Dictionary<string, string>()
                {
                    [""] = "序号",
                },
                Data = exportData,
                ExportType = "",
                FileName = fileName,
                FilePath = fullPath
            };

            //3.调用公用方法生成导出数据

            var result = QNExcelHelper.ExportExcel(exportParam);

            return new BizData<QNExcelExportData>() { Data = result };
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QN.Ots.Photo.MNG.Hosting.Controllers
{
    using Microsoft.AspNetCore.Mvc;
    using QN.EDF.AspNet.Auth;
    using QN.EDF.Common;
    using QN.EDF.Model;
    using QN.Ots.Photo.Core.BusinessEntity;
    using QN.Ots.Photo.Core.ServiceInterface;
    using QN.Ots.Photo.Framework;
    using QN.Ots.Photo.MNG.Hosting.Framework;
    using QN.Ots.Photo.Photo.BusinessEntity;
    using QN.Ots.Photo.Photo.ServiceInterface;


    public class PhotoImgController : PhotoMNGBaseController
    {

        private static IPhotoImgSI si = QNInjection.Build<IPhotoImgSI>();

        private static IHttpContextAccessor http = QNInjection.Build<IHttpContextAccessor>();

        private static IWebHostEnvironment webHost = QNInjection.Build<IWebHostEnvironment>();

        [HttpPost()]
        [Route("photo/list-photo-img")]
        public IActionResult GetPhotoImgPaging([FromBody] PageRequest<PhotoImgBiz> data)
        {

            BizData<(List<PhotoImgBiz>, int)> bizResponse = si.GetPhotoImgPaging(data);
            var apiData = bizResponse.Transfer<PhotoImgBiz, List<PhotoImgBiz>>(data.Current, data.PageSize);
            var viewUrl = $"{QNInjection.Build<IConfiguration>()?.GetValue<string>("QN:Upload:Url") ?? ""}";

            apiData.Data.Data.ForEach(p =>
            {
                p.Path = viewUrl + p.Path;
            });

            return Ok(apiData);
        }

        [HttpPost()]
        [Route("photo/list-photo-img-api")]
        [QNAllowAnonymous]
        public IActionResult GetPhotoImgPagingApi([FromBody] PageRequest<PhotoImgBiz> data)
        {

            BizData<(List<PhotoImgBiz>, int)> bizResponse = si.GetPhotoImgPaging(data);
            var apiData = bizResponse.Transfer<PhotoImgBiz, List<PhotoImgBiz>>(data.Current, data.PageSize);

            //transfer view url
            //http://localhost:5002/img/mng/

            var viewUrl = $"{QNInjection.Build<IConfiguration>()?.GetValue<string>("QN:Upload:Url") ?? ""}";
            var urlData = apiData.Data.Data.Select(x => viewUrl + x.Path).ToList();
            var newApiData = new ApiData<List<string>>()
            {
                Success = apiData.Success,
                Msg = apiData.Msg,
                Code = apiData.Code,
                Data = urlData
            };

            return Ok(newApiData);
        }

        [HttpPost()]
        [Route("photo/add-photo-img")]
        public IActionResult AddPhotoImg([FromBody] PhotoImgBiz data)
        {
            BizData<int> bizResponse = si.AddPhotoImg(new List<PhotoImgBiz>() { data });
            var apiData = bizResponse.Transfer<ApiData<int>>();
            return Ok(apiData);
        }

        [HttpPost()]
        [Route("photo/update-photo-img")]
        public IActionResult UpdatePhotoImg([FromBody] PhotoImgBiz data)
        {

            BizData<int> bizResponse = si.UpdatePhotoImg(new List<PhotoImgBiz>() { data });
            var apiData = bizResponse.Transfer<ApiData<int>>();
            return Ok(apiData);
        }

        [HttpGet()]
        [Route("photo/detail-photo-img")]
        public IActionResult GetPhotoImgDetail([FromQuery] PhotoImgBiz data)
        {

            BizData<PhotoImgBiz> bizResponse = si.GetPhotoImgDetail(data);
            var apiData = bizResponse.Transfer<ApiData<PhotoImgBiz>>();
            return Ok(apiData);
        }

        [HttpPost()]
        [Route("photo/delete-photo-img")]
        public IActionResult DeletePhotoImg([FromBody] QNIDParamBiz data)
        {

            BizData<int> bizResponse = si.DeletePhotoImg(data);
            var apiData = bizResponse.Transfer<ApiData<int>>();
            return Ok(apiData);
        }

        [HttpPost()]
        [Route("photo/export-photo-img")]
        public IActionResult ExportPhotoImg()
        {

            BizData<QNExcelExportData> biz = si.ExportPhotoImg(new PageRequest<PhotoImgBiz>());
            FileStreamResult fsr = File(biz.Data.ExportStream, biz.Data.OutFormat, biz.Data.FileName);
            return fsr;
        }
    }
}

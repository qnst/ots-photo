//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QN.Ots.Photo.MNG.Hosting.Controllers
{
    using Microsoft.AspNetCore.Mvc;
    using QN.EDF.AspNet.Auth;
    using QN.EDF.Common;
    using QN.EDF.Model;
    using QN.Ots.Photo.Core.BusinessEntity;
    using QN.Ots.Photo.Core.ServiceInterface;
    using QN.Ots.Photo.MNG.Hosting.Framework;
    using QN.Ots.Photo.Photo.BusinessEntity;
    using QN.Ots.Photo.Photo.ServiceInterface;


    public class PhotoCategoryController : PhotoMNGBaseController
    {

        private static IPhotoCategorySI si = QNInjection.Build<IPhotoCategorySI>();

        private static IHttpContextAccessor http = QNInjection.Build<IHttpContextAccessor>();

        private static IWebHostEnvironment webHost = QNInjection.Build<IWebHostEnvironment>();

        [HttpPost()]
        [Route("photo/list-photo-category")]
        public IActionResult GetPhotoCategoryPaging([FromBody] PageRequest<PhotoCategoryBiz> data)
        {

            BizData<(List<PhotoCategoryBiz>, int)> bizResponse = si.GetPhotoCategoryPaging(data);
            var apiData = bizResponse.Transfer<PhotoCategoryBiz, List<PhotoCategoryBiz>>(data.Current, data.PageSize);
            return Ok(apiData);
        }

        [HttpPost()]
        [Route("photo/list-photo-category-api")]
        [QNAllowAnonymous]
        public IActionResult GetPhotoCategoryPagingApi([FromBody] PageRequest<PhotoCategoryBiz> data)
        {
            //data.PageSize = 10000;

            BizData<(List<PhotoCategoryBiz>, int)> bizResponse = si.GetPhotoCategoryPaging(data);
            var apiData = bizResponse.Transfer<PhotoCategoryBiz, List<PhotoCategoryBiz>>(data.Current, data.PageSize);

            var newApiData = new List<PhotoCategoryBiz>();

            apiData.Data.Data.Where(x => string.IsNullOrEmpty(x.ParentId)).ForEach(m1 =>
            {
                var subList = apiData.Data.Data.Where(m2 => m2.ParentId == m1.Id).ToList();

                var newPt = new PhotoCategoryBiz()
                {
                    Id = m1.Id,
                    Name = m1.Name,
                    Thumb = m1.Thumb,
                    ParentId = m1.ParentId,
                    Remark = m1.Remark,
                    ParentName = m1.ParentName,
                    Images = m1.Images,
                    ImgStr = m1.ImgStr,
                    Sub = subList?.Take(3).ToList(),
                };

                newApiData.Add(newPt);
            });

            return Ok(newApiData);
        }

        [HttpPost()]
        [Route("photo/list-photo-category-api2")]
        [QNAllowAnonymous]
        public IActionResult GetPhotoCategoryPagingApi2([FromBody] PageRequest<PhotoCategoryBiz> data)
        {
            //data.PageSize = 10000;

            BizData<(List<PhotoCategoryBiz>, int)> bizResponse = si.GetPhotoCategoryPaging(new PageRequest<PhotoCategoryBiz>()
            {
                PageSize = data.PageSize,
                Current = data.Current
            });
            var apiData = bizResponse.Transfer<PhotoCategoryBiz, List<PhotoCategoryBiz>>(data.Current, data.PageSize);

            var newApiData = new List<PhotoCategoryBiz>();

            apiData.Data.Data.Where(x => x.ParentId == data.Data.Id || x.Id == data.Data.Id).ForEach(m1 =>
            {
                var subList = apiData.Data.Data.Where(m2 => m2.ParentId == m1.Id).ToList();

                subList.ForEach(mm => mm.Images = mm.Images?.Take(6)?.ToList());

                if (subList.Count > 0)
                {
                    var newPt = new PhotoCategoryBiz()
                    {
                        Name = m1.Name,
                        Thumb = m1.Thumb,
                        ParentId = m1.ParentId,
                        Remark = m1.Remark,
                        ParentName = m1.ParentName,
                        Images = m1.Images,
                        ImgStr = m1.ImgStr,
                        //Sub = subList.Take(6).ToList(),
                        Sub = subList
                    };

                    newApiData.Add(newPt);
                }
            });

            return Ok(newApiData);
        }

        [HttpPost()]
        [Route("photo/list-photo-category-api3")]
        [QNAllowAnonymous]
        public IActionResult GetPhotoCategoryPagingApi3([FromBody] PageRequest<PhotoCategoryBiz> data)
        {
            //data.PageSize = 10000;

            BizData<(List<PhotoCategoryBiz>, int)> bizResponse = si.GetPhotoCategoryPaging(new PageRequest<PhotoCategoryBiz>()
            {
                PageSize = data.PageSize,
                Current = data.Current
            });

            var apiData = bizResponse.Transfer<PhotoCategoryBiz, List<PhotoCategoryBiz>>(data.Current, data.PageSize);
            var newApiData = apiData.Data.Data.Where(x => x.Id == data.Data.Id).FirstOrDefault();

            return Ok(newApiData);
        }

        [HttpPost()]
        [Route("photo/list-photo-category-yuyue")]
        [QNAllowAnonymous]
        public IActionResult GetPhotoCategoryPagingYuyue([FromBody] PageRequest<PhotoCategoryBiz> data)
        {
            //data.PageSize = 10000;

            BizData<(List<PhotoCategoryBiz>, int)> bizResponse = si.GetPhotoCategoryPaging(data);
            var apiData = bizResponse.Transfer<PhotoCategoryBiz, List<PhotoCategoryBiz>>(data.Current, data.PageSize);

            var newApiData = new List<PhotoCategoryBiz>();

            apiData.Data.Data.Where(x => string.IsNullOrEmpty(x.ParentId)).ForEach(m1 =>
            {
                var subList = apiData.Data.Data.Where(m2 => m2.ParentId == m1.Id).ToList();

                var newPt = new PhotoCategoryBiz()
                {
                    Id = m1.Id,
                    Name = m1.Name,
                    Thumb = m1.Thumb,
                    ParentId = m1.ParentId,
                    Remark = m1.Remark,
                    ParentName = m1.ParentName,
                    Images = m1.Images,
                    ImgStr = m1.ImgStr,
                    Sub = subList,// subList?.Take(3).ToList(),
                };

                newApiData.Add(newPt);
            });

            var rsp = new ApiData<List<PhotoCategoryBiz>>()
            {
                Code = 200,
                ShowType = QNEnum.ErrorShowType.ERROR_MESSAGE,
                Success = true,
                Data = newApiData,
                Msg = "succeed"
            };

            return Ok(rsp);
        }

        [HttpPost()]
        [Route("photo/add-photo-category")]
        public IActionResult AddPhotoCategory([FromBody] PhotoCategoryBiz data)
        {

            BizData<int> bizResponse = si.AddPhotoCategory(new List<PhotoCategoryBiz>() { data });
            var apiData = bizResponse.Transfer<ApiData<int>>();
            return Ok(apiData);
        }

        [HttpPost()]
        [Route("photo/update-photo-category")]
        public IActionResult UpdatePhotoCategory([FromBody] PhotoCategoryBiz data)
        {

            BizData<int> bizResponse = si.UpdatePhotoCategory(new List<PhotoCategoryBiz>() { data });
            var apiData = bizResponse.Transfer<ApiData<int>>();
            return Ok(apiData);
        }

        [HttpGet()]
        [Route("photo/detail-photo-category")]
        public IActionResult GetPhotoCategoryDetail([FromQuery] PhotoCategoryBiz data)
        {

            BizData<PhotoCategoryBiz> bizResponse = si.GetPhotoCategoryDetail(data);
            var apiData = bizResponse.Transfer<ApiData<PhotoCategoryBiz>>();
            return Ok(apiData);
        }

        [HttpPost()]
        [Route("photo/delete-photo-category")]
        public IActionResult DeletePhotoCategory([FromBody] QNIDParamBiz data)
        {

            BizData<int> bizResponse = si.DeletePhotoCategory(data);
            var apiData = bizResponse.Transfer<ApiData<int>>();
            return Ok(apiData);
        }

        [HttpPost()]
        [Route("photo/export-photo-category")]
        public IActionResult ExportPhotoCategory()
        {

            BizData<QNExcelExportData> biz = si.ExportPhotoCategory(new PageRequest<PhotoCategoryBiz>());
            FileStreamResult fsr = File(biz.Data.ExportStream, biz.Data.OutFormat, biz.Data.FileName);
            return fsr;
        }
    }
}

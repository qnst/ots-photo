//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QN.Ots.Photo.MNG.Hosting.Controllers
{
    using Microsoft.AspNetCore.Mvc;
    using QN.EDF.Common;
    using QN.EDF.Model;
    using QN.Ots.Photo.Core.BusinessEntity;
    using QN.Ots.Photo.Core.ServiceInterface;
    using QN.Ots.Photo.MNG.Hosting.Framework;
    using QN.EDF.AspNet.Auth;
    using Newtonsoft.Json;
    using System.Reflection;

    public class MngUserController : PhotoMNGBaseController
    {

        private static IMngUserSI si = QNInjection.Build<IMngUserSI>();
        private static IApiUserSI apiSi = QNInjection.Build<IApiUserSI>();
        private static IHttpContextAccessor http = QNInjection.Build<IHttpContextAccessor>();

        private static IWebHostEnvironment webHost = QNInjection.Build<IWebHostEnvironment>();

        [HttpPost()]
        [Route("core/list-edf-mng-user")]
        public IActionResult GetMngUserPaging([FromBody] PageRequest<MngUserBiz> data)
        {

            BizData<(List<MngUserBiz>, int)> bizResponse = si.GetMngUserPaging(data);
            var apiData = bizResponse.Transfer<MngUserBiz, List<MngUserBiz>>(data.Current, data.PageSize);
            return Ok(apiData);
        }

        [HttpPost()]
        [Route("core/add-edf-mng-user")]
        public IActionResult AddMngUser([FromBody] MngUserBiz data)
        {

            BizData<int> bizResponse = si.AddMngUser(new List<MngUserBiz>() { data });
            var apiData = bizResponse.Transfer<ApiData<int>>();
            return Ok(apiData);
        }

        [HttpPost()]
        [Route("core/update-edf-mng-user")]
        public IActionResult UpdateMngUser([FromBody] MngUserBiz data)
        {

            BizData<int> bizResponse = si.UpdateMngUser(new List<MngUserBiz>() { data });
            var apiData = bizResponse.Transfer<ApiData<int>>();
            return Ok(apiData);
        }

        [HttpGet()]
        [Route("core/detail-edf-mng-user")]
        public IActionResult GetMngUserDetail([FromQuery] MngUserBiz data)
        {

            BizData<MngUserBiz> bizResponse = si.GetMngUserDetail(data);
            var apiData = bizResponse.Transfer<ApiData<MngUserBiz>>();
            return Ok(apiData);
        }

        [HttpPost()]
        [Route("core/delete-edf-mng-user")]
        public IActionResult DeleteMngUser([FromBody] QNIDParamBiz data)
        {

            BizData<int> bizResponse = si.DeleteMngUser(data);
            var apiData = bizResponse.Transfer<ApiData<int>>();
            return Ok(apiData);
        }

        [HttpPost()]
        [Route("core/export-edf-mng-user")]
        public IActionResult ExportMngUser()
        {

            BizData<QNExcelExportData> biz = si.ExportMngUser(new PageRequest<MngUserBiz>());
            FileStreamResult fsr = File(biz.Data.ExportStream, biz.Data.OutFormat, biz.Data.FileName);
            return fsr;
        }

        [HttpPost()]
        [Route("core/login-edf-mng-user")]
        [QNAllowAnonymous()]
        public IActionResult LoginMngUser([FromBody] QueryRequest<LoginBiz> data)
        {
            /* online test code
            var asb = QNServiceInstall.LoadAssembly(new List<string>());

            string[] files = Directory.GetFiles(AppDomain.CurrentDomain.BaseDirectory, "*.dll");
            string[] files2 = Directory.GetFiles(AppContext.BaseDirectory, "*.dll");
            List<string> source = (from m in (files?.Concat(files2)?.Distinct())?.Select((string m) => m.Split("\\").LastOrDefault()).ToList()
                                   where m.StartsWith("QN") && (m.EndsWith("Service.dll") || m.EndsWith("BusinessComponent.dll") || m.EndsWith("DataAccess.dll") || m.EndsWith("Schedule.dll"))
                                   select m).ToList();
            var assemblies = source.Select((string x) => Assembly.Load(x.Replace(".dll", ""))).ToList();

            if (si == null)
            {

                return Ok("si is null" + AppDomain.CurrentDomain.BaseDirectory + AppContext.BaseDirectory +
                    JsonConvert.SerializeObject(asb) + "\r\n" + JsonConvert.SerializeObject(files) + "\r\n" +
                    JsonConvert.SerializeObject(files2));
            }
            */

            BizData<QNUserInfoBiz> bizResponse = si.LoginMngUser(data);
            var apiData = bizResponse.Transfer<ApiData<QNUserInfoBiz>>();
            return Ok(apiData);
        }

        [HttpGet()]
        [Route("core/current-edf-mng-user")]
        public IActionResult CurrentMngUser()
        {

            BizData<QNUserInfoBiz> bizResponse = si.GetCurrentMngUser();
            var apiData = bizResponse.Transfer<ApiData<QNUserInfoBiz>>();
            return Ok(apiData);
        }

        [HttpPost()]
        [Route("core/login-out-edf-mng-user")]
        public IActionResult LoginOut()
        {

            var apiData = new ApiData<object>() { Code = 200, ShowType = QNEnum.ErrorShowType.SILENT, Success = true, Data = { }, Msg = "login out succeed!" };
            return Ok(apiData);
        }

        [HttpGet()]
        [Route("core/current-edf-api-user")]
        //[QNAllowAnonymous]
        public IActionResult CurrentApiUser()
        {
            BizData<QNUserInfoBiz> bizResponse = apiSi.GetCurrentApiUser();
            var apiData = bizResponse.Transfer<ApiData<QNUserInfoBiz>>();
            return Ok(apiData);
        }
    }
}
